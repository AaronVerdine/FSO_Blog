{"ast":null,"code":"import _classCallCheck from\"/Users/AaronVerdine/Desktop/WEB_DEV/Projects/fso_blog/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import auth0 from\"auth0-js\";import history from\"./history\";var Auth=function Auth(){var _this=this;_classCallCheck(this,Auth);this.auth0=new auth0.WebAuth({domain:\"webapp1.auth0.com\",clientID:\"\",redirectUri:\"http://localhost:3000/callback\",responseType:\"token id_token\",scope:\"openid profile email\"});this.userProfile={};this.login=function(){_this.auth0.authorize();};this.handleAuth=function(){_this.auth0.parseHash(function(err,authResult){if(authResult){localStorage.setItem(\"access_token\",authResult.accessToken);localStorage.setItem(\"id_token\",authResult.idToken);var expiresAt=JSON.stringify(authResult.expiresIn*1000+new Date().getTime());localStorage.setItem(\"expiresAt\",expiresAt);_this.getProfile();setTimeout(function(){history.replace(\"/authcheck\");},600);}else{console.log(err);}});};this.getAccessToken=function(){if(localStorage.getItem(\"access_token\")){var accessToken=localStorage.getItem(\"access_token\");return accessToken;}else{return null;}};this.getProfile=function(){var accessToken=_this.getAccessToken();if(accessToken){_this.auth0.client.userInfo(accessToken,function(err,profile){if(profile){_this.userProfile={profile:profile};}});}};this.logout=function(){localStorage.removeItem(\"access_token\");localStorage.removeItem(\"id_token\");localStorage.removeItem(\"expiresAt\");setTimeout(function(){history.replace(\"/authcheck\");},200);};this.isAuthenticated=function(){var expiresAt=JSON.parse(localStorage.getItem(\"expiresAt\"));return new Date().getTime()<expiresAt;};};export{Auth as default};","map":{"version":3,"sources":["/Users/AaronVerdine/Desktop/WEB_DEV/Projects/fso_blog/Client/src/utils/auth.js"],"names":["auth0","history","Auth","WebAuth","domain","clientID","redirectUri","responseType","scope","userProfile","login","authorize","handleAuth","parseHash","err","authResult","localStorage","setItem","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","getProfile","setTimeout","replace","console","log","getAccessToken","getItem","client","userInfo","profile","logout","removeItem","isAuthenticated","parse"],"mappings":"qLAAA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,C,GAEqBC,CAAAA,I,gEAEnBF,K,CAAQ,GAAIA,CAAAA,KAAK,CAACG,OAAV,CAAkB,CACxBC,MAAM,CAAE,mBADgB,CAExBC,QAAQ,CAAE,EAFc,CAGxBC,WAAW,CAAE,gCAHW,CAIxBC,YAAY,CAAE,gBAJU,CAKxBC,KAAK,CAAE,sBALiB,CAAlB,C,MASRC,W,CAAc,E,MAGdC,K,CAAQ,UAAM,CACZ,KAAI,CAACV,KAAL,CAAWW,SAAX,GACD,C,MAGDC,U,CAAa,UAAM,CACjB,KAAI,CAACZ,KAAL,CAAWa,SAAX,CAAqB,SAACC,GAAD,CAAMC,UAAN,CAAqB,CACxC,GAAIA,UAAJ,CAAgB,CACdC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAqCF,UAAU,CAACG,WAAhD,EACAF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCF,UAAU,CAACI,OAA5C,EAEA,GAAIC,CAAAA,SAAS,CAAGC,IAAI,CAACC,SAAL,CACdP,UAAU,CAACQ,SAAX,CAAuB,IAAvB,CAA8B,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EADhB,CAAhB,CAGAT,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCG,SAAlC,EAEA,KAAI,CAACM,UAAL,GACAC,UAAU,CAAC,UAAM,CACf1B,OAAO,CAAC2B,OAAR,CAAgB,YAAhB,EACD,CAFS,CAEP,GAFO,CAAV,CAGD,CAbD,IAaO,CACLC,OAAO,CAACC,GAAR,CAAYhB,GAAZ,EACD,CACF,CAjBD,EAkBD,C,MAGDiB,c,CAAiB,UAAM,CACrB,GAAIf,YAAY,CAACgB,OAAb,CAAqB,cAArB,CAAJ,CAA0C,CACxC,GAAMd,CAAAA,WAAW,CAAGF,YAAY,CAACgB,OAAb,CAAqB,cAArB,CAApB,CACA,MAAOd,CAAAA,WAAP,CACD,CAHD,IAGO,CACL,MAAO,KAAP,CACD,CACF,C,MAGDQ,U,CAAa,UAAM,CACjB,GAAIR,CAAAA,WAAW,CAAG,KAAI,CAACa,cAAL,EAAlB,CACA,GAAIb,WAAJ,CAAiB,CACf,KAAI,CAAClB,KAAL,CAAWiC,MAAX,CAAkBC,QAAlB,CAA2BhB,WAA3B,CAAwC,SAACJ,GAAD,CAAMqB,OAAN,CAAkB,CACxD,GAAIA,OAAJ,CAAa,CACX,KAAI,CAAC1B,WAAL,CAAmB,CAAE0B,OAAO,CAAPA,OAAF,CAAnB,CACD,CACF,CAJD,EAKD,CACF,C,MAGDC,M,CAAS,UAAM,CACbpB,YAAY,CAACqB,UAAb,CAAwB,cAAxB,EACArB,YAAY,CAACqB,UAAb,CAAwB,UAAxB,EACArB,YAAY,CAACqB,UAAb,CAAwB,WAAxB,EACAV,UAAU,CAAC,UAAM,CACf1B,OAAO,CAAC2B,OAAR,CAAgB,YAAhB,EACD,CAFS,CAEP,GAFO,CAAV,CAGD,C,MAGDU,e,CAAkB,UAAM,CACtB,GAAIlB,CAAAA,SAAS,CAAGC,IAAI,CAACkB,KAAL,CAAWvB,YAAY,CAACgB,OAAb,CAAqB,WAArB,CAAX,CAAhB,CACA,MAAO,IAAIR,CAAAA,IAAJ,GAAWC,OAAX,GAAuBL,SAA9B,CACD,C,UA5EkBlB,I","sourcesContent":["import auth0 from \"auth0-js\";\nimport history from \"./history\";\n\nexport default class Auth {\n  // auth0: property used to initialize Auth0 app\n  auth0 = new auth0.WebAuth({\n    domain: \"webapp1.auth0.com\",\n    clientID: \"\",\n    redirectUri: \"http://localhost:3000/callback\",\n    responseType: \"token id_token\",\n    scope: \"openid profile email\",\n  });\n\n  // userProfile: empty object that will store user profile data from Auth0\n  userProfile = {};\n\n  // login: brings up login widget; allows user to login w/ .authorize() function\n  login = () => {\n    this.auth0.authorize();\n  };\n\n  // handleAuth: saves id and access token from Auth0 into local storage; sets token expiration\n  handleAuth = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult) {\n        localStorage.setItem(\"access_token\", authResult.accessToken);\n        localStorage.setItem(\"id_token\", authResult.idToken);\n\n        let expiresAt = JSON.stringify(\n          authResult.expiresIn * 1000 + new Date().getTime()\n        );\n        localStorage.setItem(\"expiresAt\", expiresAt);\n\n        this.getProfile();\n        setTimeout(() => {\n          history.replace(\"/authcheck\");\n        }, 600);\n      } else {\n        console.log(err);\n      }\n    });\n  };\n\n  // getAccessToken: retrieves access token from local storage\n  getAccessToken = () => {\n    if (localStorage.getItem(\"access_token\")) {\n      const accessToken = localStorage.getItem(\"access_token\");\n      return accessToken;\n    } else {\n      return null;\n    }\n  };\n\n  // getProfile: parses access token to extract user profile data\n  getProfile = () => {\n    let accessToken = this.getAccessToken();\n    if (accessToken) {\n      this.auth0.client.userInfo(accessToken, (err, profile) => {\n        if (profile) {\n          this.userProfile = { profile };\n        }\n      });\n    }\n  };\n\n  // logout: logs out user; removes acces token from local storage\n  logout = () => {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"id_token\");\n    localStorage.removeItem(\"expiresAt\");\n    setTimeout(() => {\n      history.replace(\"/authcheck\");\n    }, 200);\n  };\n\n  // isAuthenticated: checks if user is logged in by comparing token expiration w/ current time\n  isAuthenticated = () => {\n    let expiresAt = JSON.parse(localStorage.getItem(\"expiresAt\"));\n    return new Date().getTime() < expiresAt;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}