{"version":3,"sources":["utils/context.js","store/actions/actions.js","store/actions/action_types.js","store/reducers/auth_reducer.js","store/reducers/form_reducer.js","store/reducers/posts_reducer.js","utils/history.js","utils/authcheck.js","hooks/home.js","hooks/header.js","store/reducers/plain_reducer.js","hooks/hook1.js","hooks/hooks_form1.js","hooks/privatecomponent.js","hooks/profile.js","routes.js","context_state_config.js","utils/auth.js","App.js","index.js"],"names":["Context","React","createContext","user_input_change","text","type","payload","user_input_submit","initialState","is_authenticated","db_profile","profile","AuthReducer","state","action","user_textChange","user_textSubmit","FormReducer","Error","posts","PostsReducer","createBrowserHistory","AuthCheck","context","useContext","useEffect","authObj","isAuthenticated","userProfile","handleUserLogin","handleUserAddProfile","axios","post","then","get","params","email","Profiler","res","handleAddDBProfile","data","history","replace","handleUserLogout","handleUserRemoveProfile","Home","props","setState","useState","Header","to","style","padding","authState","onClick","logout","login","stateprop1","stateprop2","Reducer1","HooksContainer1","value","setValue","useEffectValue","setUseEffectValue","useReducer","dispatch","setTimeout","dispatchContextTrue","dispatchContextFalse","useContextSubmitState","HooksForm1","valueChange","setValueChange","valueSubmit","setValueSubmit","onSubmit","event","preventDefault","target","id","onChange","ACTIONS","useContextSubmit","useContextChange","useContextChangeState","PrivateComponent","Profile","RenderProfile","nickname","src","picture","alt","name","email_verified","PrivateRoute","Component","component","auth","render","pathname","Routes","exact","path","HooksForm","handleAuth","auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","authorize","parseHash","err","authResult","localStorage","setItem","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","getProfile","console","log","getAccessToken","getItem","client","userInfo","removeItem","parse","ContextState","statePostsReducer","dispatchPostsReducer","stateAuthReducer","dispatchAuthReducer","stateFormReducer","dispatchFormReducer","Provider","persist","handleFormSubmit","handleFormChange","profileState","dbProfileState","handleAddProfile","handleDBProfile","handleRemoveDBProfile","postsState","handleAddPosts","handleSetPosts","handleRemovePosts","location","hash","handleAuthentication","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc852608.chunk.js","sourcesContent":["import React from \"react\";\n\n// Intializes Context object/variable\n\nconst Context = React.createContext();\n\nexport default Context;\n","import * as ACTION_TYPES from \"./action_types\";\n\n// Regular actions\nexport const SUCCESS = {\n  type: ACTION_TYPES.SUCCESS,\n};\n\nexport const FAILURE = {\n  type: ACTION_TYPES.FAILURE,\n};\n\n//Action creators\nexport const success = () => {\n  return {\n    type: ACTION_TYPES.SUCCESS,\n  };\n};\n\nexport const failure = () => {\n  return {\n    type: ACTION_TYPES.FAILURE,\n  };\n};\n\nexport const login_sucess = () => {\n  return {\n    type: ACTION_TYPES.LOGIN_SUCCESS,\n  };\n};\n\nexport const login_failure = () => {\n  return {\n    type: ACTION_TYPES.LOGIN_FAILURE,\n  };\n};\n\nexport const add_profile = (profile) => {\n  return {\n    type: ACTION_TYPES.ADD_PROFILE,\n    payload: profile,\n  };\n};\n\nexport const remove_profile = () => {\n  return {\n    type: ACTION_TYPES.REMOVE_PROFILE,\n  };\n};\n\nexport const user_input_change = (text) => {\n  return {\n    type: ACTION_TYPES.USER_INPUT_CHANGE,\n    payload: text,\n  };\n};\n\nexport const user_input_submit = (text) => {\n  return {\n    type: ACTION_TYPES.USER_INPUT_SUBMIT,\n    payload: text,\n  };\n};\n\n// User Profile/DB types\n\nexport const set_db_profile = (profile) => {\n  return {\n    type: ACTION_TYPES.SET_DB_PROFILE,\n    payload: profile,\n  };\n};\n\nexport const remove_db_profile = () => {\n  return {\n    type: ACTION_TYPES.REMOVE_DB_PROFILE,\n  };\n};\n\nexport const set_db_posts = (posts) => {\n  return {\n    type: ACTION_TYPES.FETCH_DB_POSTS,\n    payload: posts,\n  };\n};\n\nexport const remove_db_posts = () => {\n  return {\n    type: ACTION_TYPES.REMOVE_DB_POSTS,\n  };\n};\n","// will be boilerplate actions\nexport const SUCCESS = \"SUCCESS\";\n\nexport const FAILURE = \"FAILURE\";\n\n// updates authentication state of user\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\n\n// saves profile data from Auth0 to global state\nexport const ADD_PROFILE = \"ADD_PROFILE\";\n\nexport const REMOVE_PROFILE = \"REMOVE_PROFILE\";\n\n// tracks changes and submits of user submitted text form\nexport const USER_INPUT_CHANGE = \"USER_INPUT_CHANGE\";\n\nexport const USER_INPUT_SUBMIT = \"USER_INPUT_SUBMIT\";\n\n// saves/removes user profile to/from DB\nexport const SET_DB_PROFILE = \"SET_DB_PROFILE\";\n\nexport const REMOVE_DB_PROFILE = \"REMOVE_DB_PROFILE\";\n\n// retreives/deletes post from DB\nexport const FETCH_DB_POSTS = \"FETCH_DB_POSTS\";\n\nexport const REMOVE_DB_POSTS = \"REMOVE_DB_POSTS\";\n","import * as ACTION_TYPES from \"../actions/action_types\";\n\n// auth_reducer.js will hold our state properties and associated actions for user authentication status and user profile data\n\nexport const initialState = {\n  is_authenticated: false,\n  db_profile: null,\n  profile: null,\n};\n\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.LOGIN_SUCCESS:\n      return {\n        ...state,\n        is_authenticated: true,\n      };\n    case ACTION_TYPES.LOGIN_FAILURE:\n      return {\n        ...state,\n        is_authenticated: false,\n      };\n    case ACTION_TYPES.ADD_PROFILE:\n      return {\n        ...state,\n        profile: action.payload,\n      };\n    case ACTION_TYPES.REMOVE_PROFILE:\n      return {\n        ...state,\n        profile: null,\n      };\n    case ACTION_TYPES.SET_DB_PROFILE:\n      return {\n        ...state,\n        db_profile: action.payload,\n      };\n    case ACTION_TYPES.REMOVE_DB_PROFILE:\n      return {\n        ...state,\n        db_profile: null,\n      };\n    default:\n      return state;\n  }\n};\n","import * as ACTION_TYPES from \"../actions/action_types\";\n\n// USER_INPUT_CHANGE tracks changes to the input element\n// USER_INPUT_SUBMIT adds submitted form to the global state\n\nexport const initialState = {\n  user_textChange: \"\",\n  user_textSubmit: \"\",\n};\n\nexport const FormReducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.USER_INPUT_CHANGE:\n      return {\n        ...state,\n        user_textChange: action.payload,\n      };\n    case ACTION_TYPES.USER_INPUT_SUBMIT:\n      return {\n        ...state,\n        user_textSubmit: action.payload,\n      };\n    default:\n      throw new Error();\n  }\n};\n","import * as ACTION_TYPES from \"../actions/action_types\";\n\nexport const initialState = {\n  posts: null,\n};\n\nexport const PostsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_DB_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case ACTION_TYPES.REMOVE_DB_POSTS:\n      return {\n        ...state,\n        posts: [],\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React, { useEffect, useContext, Profiler } from \"react\";\nimport history from \"./history\";\nimport Context from \"./context\";\nimport * as ACTIONS from \"../store/actions/actions\";\n\nimport axios from \"axios\";\n\n// Utilize useEffect to update authentication state\n\nconst AuthCheck = () => {\n  const context = useContext(Context);\n\n  useEffect(() => {\n    if (context.authObj.isAuthenticated()) {\n      // Checkes if access tokens in local storage haven't expired and user is still logged in\n      const profile = context.authObj.userProfile;\n      context.handleUserLogin();\n      context.handleUserAddProfile(profile);\n      axios\n        .post(\"/api/posts/userprofiletodb\", profile)\n        .then(\n          axios.get(\"/api/get/userprofilefromdb\", {\n            params: { email: Profiler.profile.email },\n          })\n        )\n        .then((res) => context.handleAddDBProfile(res.data))\n        .then(history.replace(\"/\"));\n    } else {\n      context.handleUserLogout();\n      context.handleUserRemoveProfile();\n      history.replace(\"/\");\n    }\n  }, [context.authObj.userProfile, context]);\n\n  return <div></div>;\n};\n\nexport default AuthCheck;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Home = (props) => {\n  useEffect(() => {\n    axios.get(\"/api/hello\").then((res) => setState(res.data));\n  }, []);\n\n  const [state, setState] = useState(\"\");\n\n  return (\n    <div>\n      Home\n      <p>{state}</p>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Context from \"../utils/context\";\n\nconst Header = () => {\n  const context = useContext(Context);\n\n  return (\n    <div>\n      <Link to=\"/\" style={{ padding: \"5px\" }}>\n        Home\n      </Link>\n      <Link to=\"/profile\" style={{ padding: \"5px\" }}>\n        Profile\n      </Link>\n      <Link to=\"/hooksform\" style={{ padding: \"5px\" }}>\n        Hooks Form\n      </Link>\n      <Link to=\"/hookscontainer\" style={{ padding: \"5px\" }}>\n        Hooks Container\n      </Link>\n      <Link to=\"/privateroute\" style={{ padding: \"5px\" }}>\n        Private Route\n      </Link>\n\n      {/* displays login/logout buttons depending on whether user is signed in/out */}\n      {!context.authState ? (\n        <button onClick={() => context.authObj.login()}>Login</button>\n      ) : (\n        <button onClick={() => context.authObj.logout()}>Logout</button>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import * as ACTION_TYPES from \"../actions/action_types\";\n\n// NEW REDUCER BOILER\n\nexport const initialState = {\n  stateprop1: false,\n  stateprop2: false,\n};\n\nexport const Reducer1 = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SUCCESS:\n      return {\n        ...state,\n        stateprop1: true,\n        stateprop2: true,\n      };\n\n    case ACTION_TYPES.FAILURE:\n      return {\n        ...state,\n        stateprop1: false,\n        stateprop2: false,\n      };\n\n    default:\n      throw new Error();\n  }\n};\n","import React, { useContext, useState, useEffect, useReducer } from \"react\";\nimport * as ACTIONS from \"../store/actions/actions\";\nimport * as Reducer1 from \"../store/reducers/plain_reducer\";\nimport Context from \"../utils/context\";\n\n// handleContextDispatchTrue/handleContextDispatchFalse updates global state\n// context.useContextSubmitState displays text from a form that saves values to the global state\n\nconst HooksContainer1 = () => {\n  const context = useContext(Context);\n\n  const [value, setValue] = useState(0);\n\n  const [useEffectValue, setUseEffectValue] = useState(null);\n\n  const [state, dispatch] = useReducer(\n    Reducer1.Reducer1,\n    Reducer1.initialState\n  );\n\n  useEffect(() => {\n    setTimeout(() => setUseEffectValue(\"useEffect worked\"), 3000);\n  }, [value]);\n\n  // incrementValue/decrementValue updates local state using useState()\n\n  const incrementValue = () => {\n    setValue(value + 1);\n  };\n\n  const decrementValue = () => {\n    setValue(value - 1);\n  };\n\n  // handleuseEffectValue updtaes useEffectValue property of local state\n\n  const handleuseEffectValue = () => {\n    setUseEffectValue(\"some string\");\n  };\n\n  // handleDispatchTrue/handleDispatchFalse dispatches actions to change stateprop1 in Reducer1 from true to false\n\n  const handleDispatchTrue = () => {\n    // dispatch2(type: \"SUCCESS\")\n    // dispatch2(ACTIONS.SUCCESS)\n    dispatch(ACTIONS.success());\n  };\n\n  const handleDispatchFalse = () => {\n    // dispatch2(type: \"FAILURE\")\n    // dispatch2(ACTIONS.FAILURE)\n    dispatch(ACTIONS.failure());\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => handleuseEffectValue()}> Handle Value </button>\n        <button onClick={() => handleDispatchTrue()}> Dispatch True </button>\n        <button onClick={() => handleDispatchFalse()}> Dispatch False </button>\n        <button onClick={() => context.dispatchContextTrue()}>\n          {\" \"}\n          Dispatch Context True{\" \"}\n        </button>\n        <button onClick={() => context.dispatchContextFalse()}>\n          {\" \"}\n          Dispatch Context False{\" \"}\n        </button>\n        <button onClick={() => incrementValue()}> Add Local Value </button>\n        <button onClick={() => decrementValue()}> Dec Local Value </button>\n        <br />\n        <br />\n        {context.useContextSubmitState ? (\n          <h3> {context.useContextSubmitState} </h3>\n        ) : (\n          <h3> No User Text </h3>\n        )}\n        <br />\n        {state.stateprop1 ? (\n          <p> stateprop1 is true </p>\n        ) : (\n          <p> stateprop1 is false </p>\n        )}\n        <br />\n        {context.stateprop2 ? (\n          <p> stateprop2 is true </p>\n        ) : (\n          <p> stateprop2 is false </p>\n        )}\n        <br />\n        {useEffectValue ? <p> {useEffectValue} </p> : <p> no value </p>}\n        <br />\n        <p>Local Value: {value}</p>\n        <br />\n        <br />\n      </div>\n    </div>\n  );\n};\n\nexport default HooksContainer1;\n","import React, { useContext, useState, useReducer } from \"react\";\nimport * as ACTIONS from \"../store/actions/actions\";\nimport * as FormReducer from \"../store/reducers/form_reducer\";\nimport Context from \"../utils/context\";\n\n// saves the state from a form using useReducer, useState, useContext\n\nconst HooksForm1 = () => {\n  const context = useContext(Context);\n\n  const [valueChange, setValueChange] = useState(\"\");\n  const [valueSubmit, setValueSubmit] = useState(\"\");\n\n  const [state, dispatch] = useReducer(\n    FormReducer.FormReducer,\n    FormReducer.initialState\n  );\n\n  const handleuseStateChange = (event) => setValueChange(event.target.value);\n\n  const handleuseStateSubmit = (event) => {\n    event.preventDefault();\n    setValueSubmit(event.target.useState.value);\n  };\n\n  const handleuseReducerChange = (event) =>\n    dispatch(ACTIONS.user_input_change(event.target.value));\n\n  const handleuseReducerSubmit = (event) => {\n    event.preventDefault();\n    dispatch(ACTIONS.user_input_submit(event.target.useReducer.value));\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleuseStateSubmit}>\n        <label> React useState: </label>\n        <input id=\"useState\" onChange={handleuseStateChange} type=\"text\" />\n        <button type=\"submit\"> Submit </button>\n      </form>\n      <br />\n      <form onSubmit={handleuseReducerSubmit}>\n        <label> React useReducer: </label>\n        <input id=\"useReducer\" onChange={handleuseReducerChange} type=\"text\" />\n        <button type=\"submit\"> Submit </button>\n      </form>\n      <br />\n      <form onSubmit={context.useContextSubmit}>\n        <label> React useContext: </label>\n        <input\n          id=\"useContext\"\n          onChange={context.useContextChange}\n          type=\"text\"\n        />\n        <button type=\"submit\"> Submit </button>\n      </form>\n      <br />\n\n      <h3>React useState:</h3>\n      <p>Change: {valueChange}</p>\n      <p>Submit: {valueSubmit}</p>\n\n      <h3>React useReducer:</h3>\n      <p>Change: {state.user_textChange}</p>\n      <p>Submit: {state.user_textSubmit}</p>\n      <br />\n      <h3>React useContext:</h3>\n      <p>Change: {context.useContextChangeState}</p>\n      <p>Submit: {context.useContextSubmitState}</p>\n      <br />\n      <br />\n    </div>\n  );\n};\n\nexport default HooksForm1;\n","import React from \"react\";\n\n// will be used in private routes nd only be accessible by authenticated users\n\nconst PrivateComponent = (props) => {\n  return <div>Private Component</div>;\n};\n\nexport default PrivateComponent;\n","import React, { useContext } from \"react\";\nimport Context from \"../utils/context\";\n\n// display user profile data from authObj passed down through context\n\nconst Profile = () => {\n  const context = useContext(Context);\n\n  const RenderProfile = (props) => {\n    return (\n      <div>\n        <h1>{props.profile.profile.nickname}</h1>\n        <br />\n        <img src={props.profile.profile.picture} alt=\"\" />\n        <br />\n        <h4>{props.profile.profile.email}</h4>\n        <br />\n        <h5>{props.profile.profile.name}</h5>\n        <br />\n        <h6>Email Verified:</h6>\n        {props.profile.profile.email_verified ? <p>Yes</p> : <p>No</p>}\n        <br />\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <RenderProfile profile={context.authObj.userProfile} />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useContext, useEffect } from \"react\";\nimport { Router, Route, Switch, Redirect } from \"react-router\";\nimport history from \"./utils/history\";\nimport Context from \"./utils/context\";\nimport AuthCheck from \"./utils/authcheck\";\n\nimport Home from \"./hooks/home\";\nimport Header from \"./hooks/header\";\nimport HooksContainer1 from \"./hooks/hook1\";\nimport Callback from \"./hooks/callback\";\nimport HooksForm from \"./hooks/hooks_form1\";\nimport PrivateComponent from \"./hooks/privatecomponent\";\nimport Profile from \"./hooks/profile\";\n\n// HOC responsible for private routes\nconst PrivateRoute = ({ component: Component, auth }) => (\n  <Route\n    render={(props) =>\n      auth === true ? (\n        <Component auth={auth} {...props} />\n      ) : (\n        <Redirect to={{ pathname: \"/\" }} />\n      )\n    }\n  />\n);\n\nconst Routes = () => {\n  const context = useContext(Context);\n\n  return (\n    <div>\n      <Router history={history}>\n        <Header />\n        <br />\n        <br />\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/hooksform\" component={HooksForm} />\n            <Route path=\"/profile\" component={Profile} />\n            <Route path=\"/hookscontainer\" component={HooksContainer1} />\n            <Route path=\"/authcheck\" component={AuthCheck} />\n\n            <PrivateRoute\n              path=\"/privateoute\"\n              auth={context.authState} // contains he value of is_authenticated property rom our AuthReducer from glabal state\n              component={PrivateComponent}\n            />\n            <PrivateRoute\n              path=\"/profile\"\n              auth={context.authState}\n              component={Profile}\n            />\n            <Route\n              path=\"/callback\"\n              render={(props) => {\n                context.handleAuth(props);\n              }}\n            />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default Routes;\n","import React, { useReducer } from \"react\";\nimport Context from \"./utils/context\";\nimport * as ACTIONS from \"./store/actions/actions\";\n\n// import * as Reducer1 from \"./store/reducers/plain_reducer\";\nimport * as AuthReducer from \"./store/reducers/auth_reducer\";\nimport * as FormReducer from \"./store/reducers/form_reducer\";\nimport * as PostsReducer from \"./store/reducers/posts_reducer\";\nimport Routes from \"./routes\";\n\nimport Auth from \"./utils/auth\";\n\nconst auth = new Auth();\n\n// IRL comment out/remove properties you don't need\n// Use obj destructuring on props inside vlaue prop --- handleUserLogin: {handlelogin} --- handleUserLogin: () => handleLogin()\n\nconst ContextState = () => {\n  /*\n        Posts Reducer\n    */\n\n  const [statePostsReducer, dispatchPostsReducer] = useReducer(\n    PostsReducer.PostsReducer,\n    PostsReducer.initialState\n  );\n\n  const handleSetPosts = (posts) => {\n    dispatchPostsReducer(ACTIONS.set_db_posts(posts));\n  };\n\n  const handleRemovePosts = () => {\n    dispatchPostsReducer(ACTIONS.remove_db_posts());\n  };\n\n  /*\n        Auth Reducer\n    */\n\n  const [stateAuthReducer, dispatchAuthReducer] = useReducer(\n    AuthReducer.AuthReducer,\n    AuthReducer.initialState\n  );\n\n  const handleLogin = () => {\n    dispatchAuthReducer(ACTIONS.login_sucess());\n  };\n\n  const handleLogout = () => {\n    dispatchAuthReducer(ACTIONS.login_failure());\n  };\n\n  const handleAddProfile = () => {\n    dispatchAuthReducer(ACTIONS.add_profile());\n  };\n\n  const handleRemoveProfile = () => {\n    dispatchAuthReducer(ACTIONS.remove_profile());\n  };\n\n  const handleDBProfile = (profile) => {\n    dispatchAuthReducer(ACTIONS.set_db_profile(profile));\n  };\n\n  const handleRemoveDBProfile = () => {\n    dispatchAuthReducer(ACTIONS.remove_db_profile());\n  };\n\n  /*\n    Form Reducer\n   */\n\n  const [stateFormReducer, dispatchFormReducer] = useReducer(\n    FormReducer.FormReducer,\n    FormReducer.initialState\n  );\n\n  const handleFormChange = (event) => {\n    dispatchFormReducer(ACTIONS.user_input_change(event.target.value));\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    event.persist();\n    dispatchFormReducer(\n      ACTIONS.user_input_submit(event.target.useContext.value)\n    );\n  };\n\n  // Handle authentication from callback\n  const handleAuthentication = (props) => {\n    if (props.location.hash) {\n      auth.handleAuth();\n    }\n  };\n\n  return (\n    <div>\n      <Context.Provider\n        value={{\n          //Reducer1\n          // stateProp1: stateReducer1.stateprop1,\n          // stateProp2: stateReducer1.stateprop2,\n          // dispatchContextTrue: () => handleDispatchTrue(),\n          // dispatchContextFalse: () => handleDispatchFalse(),\n\n          // Form Reducer\n          useContextChangeState: stateFormReducer.user_textChange,\n          useContextSubmitState: stateFormReducer.user_textSubmit,\n          useContextSubmit: (event) => handleFormSubmit(event),\n          useContextChange: (event) => handleFormChange(event),\n\n          // Auth Reducer\n          authState: stateAuthReducer.is_authenticated,\n          profileState: stateAuthReducer.profile,\n          dbProfileState: stateAuthReducer.db_profile,\n          handleUserLogin: () => handleLogin(),\n          handleUserLogout: () => handleLogout(),\n          handleUserAddProfile: (profile) => handleAddProfile(profile),\n          handleUserRemoveProfile: () => handleRemoveProfile(),\n          handleAddDBProfile: (profile) => handleDBProfile(profile),\n          handleRemoveDBProfile: () => handleRemoveDBProfile(),\n\n          // Posts State\n          postsState: statePostsReducer.posts,\n          handleAddPosts: (posts) => handleSetPosts(posts),\n          handleRemovePosts: () => handleRemovePosts(),\n\n          // Handle Auth\n          handleAuth: (props) => handleAuthentication(props),\n          authObj: auth,\n        }}\n      >\n        <Routes />\n      </Context.Provider>\n    </div>\n  );\n};\n\nexport default ContextState;\n","import auth0 from \"auth0-js\";\nimport history from \"./history\";\n\nexport default class Auth {\n  // auth0: property used to initialize Auth0 app\n  auth0 = new auth0.WebAuth({\n    domain: \"webapp1.auth0.com\",\n    clientID: \"\",\n    redirectUri: \"http://localhost:3000/callback\",\n    responseType: \"token id_token\",\n    scope: \"openid profile email\",\n  });\n\n  // userProfile: empty object that will store user profile data from Auth0\n  userProfile = {};\n\n  // login: brings up login widget; allows user to login w/ .authorize() function\n  login = () => {\n    this.auth0.authorize();\n  };\n\n  // handleAuth: saves id and access token from Auth0 into local storage; sets token expiration\n  handleAuth = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult) {\n        localStorage.setItem(\"access_token\", authResult.accessToken);\n        localStorage.setItem(\"id_token\", authResult.idToken);\n\n        let expiresAt = JSON.stringify(\n          authResult.expiresIn * 1000 + new Date().getTime()\n        );\n        localStorage.setItem(\"expiresAt\", expiresAt);\n\n        this.getProfile();\n        setTimeout(() => {\n          history.replace(\"/authcheck\");\n        }, 600);\n      } else {\n        console.log(err);\n      }\n    });\n  };\n\n  // getAccessToken: retrieves access token from local storage\n  getAccessToken = () => {\n    if (localStorage.getItem(\"access_token\")) {\n      const accessToken = localStorage.getItem(\"access_token\");\n      return accessToken;\n    } else {\n      return null;\n    }\n  };\n\n  // getProfile: parses access token to extract user profile data\n  getProfile = () => {\n    let accessToken = this.getAccessToken();\n    if (accessToken) {\n      this.auth0.client.userInfo(accessToken, (err, profile) => {\n        if (profile) {\n          this.userProfile = { profile };\n        }\n      });\n    }\n  };\n\n  // logout: logs out user; removes acces token from local storage\n  logout = () => {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"id_token\");\n    localStorage.removeItem(\"expiresAt\");\n    setTimeout(() => {\n      history.replace(\"/authcheck\");\n    }, 200);\n  };\n\n  // isAuthenticated: checks if user is logged in by comparing token expiration w/ current time\n  isAuthenticated = () => {\n    let expiresAt = JSON.parse(localStorage.getItem(\"expiresAt\"));\n    return new Date().getTime() < expiresAt;\n  };\n}\n","import React from \"react\";\nimport ContextState from \"./context_state_config\";\n\nconst App = () => {\n  return (\n    <div>\n      <ContextState />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}